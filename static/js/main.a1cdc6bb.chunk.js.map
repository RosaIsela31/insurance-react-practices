{"version":3,"sources":["components/Header.js","components/Formulario.js","components/AppContainer.js","App.js","serviceWorker.js","index.js"],"names":["ContenedorHeader","styled","header","TextHeader","h1","Header","titulo","Campo","div","Label","label","Select","select","InputRadio","input","Boton","button","Error","Formulario","useState","marca","year","plan","datos","guardarDatos","error","setError","obtenerInformacion","e","target","name","value","onSubmit","preventDefault","trim","onChange","type","checked","Contenedor","ContenedorFormulario","AppContainer","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ujBAGA,IAAMA,EAAmBC,IAAOC,OAAV,KAOhBC,EAAaF,IAAOG,GAAV,KAeDC,EARA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACE,kBAACN,EAAD,KACE,kBAACG,EAAD,KAAaG,K,0lCCjBnB,IAAMC,EAAQN,IAAOO,IAAV,KAMLC,EAAQR,IAAOS,MAAV,KAILC,EAASV,IAAOW,OAAV,KAQNC,EAAaZ,IAAOa,MAAV,KAIVC,EAAQd,IAAOe,OAAV,KAmBLC,EAAQhB,IAAOO,IAAV,KAwGIU,EA/FI,WAAO,IAAD,EACSC,mBAAS,CACvCC,MAAO,GACPC,KAAM,GACNC,KAAM,KAJe,mBACfC,EADe,KACRC,EADQ,OAOKL,oBAAS,GAPd,mBAOfM,EAPe,KAORC,EAPQ,KAUfN,EAAuBG,EAAvBH,MAAOC,EAAgBE,EAAhBF,KAAMC,EAAUC,EAAVD,KAGfK,EAAqB,SAAAC,GACzBJ,EAAa,eACRD,EADO,eAETK,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UAiB/B,OACE,0BACEC,SAdkB,SAAAJ,GACpBA,EAAEK,iBAEkB,KAAjBb,EAAMc,QAAiC,KAAhBb,EAAKa,QAAiC,KAAhBZ,EAAKY,OAKrDR,GAAS,GAJPA,GAAS,KAYVD,EAAQ,kBAACR,EAAD,0CAAmD,KAC1D,kBAACV,EAAD,KACE,kBAACE,EAAD,cACA,kBAACE,EAAD,CACEmB,KAAK,QACLC,MAAOX,EACPe,SAAUR,GAEV,4BAAQI,MAAM,IAAd,qBACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,eAGJ,kBAACxB,EAAD,KACE,kBAACE,EAAD,eACA,kBAACE,EAAD,CACEmB,KAAK,OACLC,MAAOV,EACPc,SAAUR,GAEV,4BAAQI,MAAM,IAAd,qBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,UAGJ,kBAACxB,EAAD,KACE,kBAACE,EAAD,aACA,kBAACI,EAAD,CACEuB,KAAK,QACLN,KAAK,OACLC,MAAM,SACNM,QAAkB,WAATf,EACTa,SAAUR,IAPd,aAUE,kBAACd,EAAD,CACEuB,KAAK,QACLN,KAAK,OACLC,MAAM,WACNM,QAAkB,aAATf,EACTa,SAAUR,IAfd,aAmBA,kBAACZ,EAAD,CAAOqB,KAAK,UAAZ,a,mOC1IN,IAAME,EAAarC,IAAOO,IAAV,KAKV+B,EAAuBtC,IAAOO,IAAV,KAmBXgC,EAdM,WACnB,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,CACEhC,OAAO,yBAET,kBAACiC,EAAD,KACE,kBAAC,EAAD,SCVOE,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWH,MCKbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a1cdc6bb.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ContenedorHeader = styled.header`\n  background-color: #26C6DA;\n  padding: 10px;\n  font-weight: bold;\n  color: #FFFFFF; \n`;\n\nconst TextHeader = styled.h1`\n  font-size: 2rem;\n  margin: 0;\n  font-family: 'Slabo 27px', serif;\n  text-align: center;\n`\n\nconst Header = ({titulo}) => {\n  return ( \n    <ContenedorHeader>\n      <TextHeader>{titulo}</TextHeader>\n    </ContenedorHeader> \n  );\n}\n \nexport default Header;","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\n\nconst Campo = styled.div`\n  display: flex;\n  margin-bottom: 1rem;\n  align-items: center;\n`;\n\nconst Label = styled.label`\n  flex: 0 0 100px;\n`;\n\nconst Select = styled.select`\n  display: block;\n  width: 100%;\n  padding: 1rem; \n  border: 1px solid #e1e1e1; \n  -webkit-appearance: none;\n`;\n\nconst InputRadio = styled.input`\n  margin: 0 1rem;\n`;\n\nconst Boton = styled.button`\n  background-color: #00838F;\n  font-size: 16px;\n  width: 100%;\n  padding: 1rem;\n  color: #fff; \n  text-transform: uppercase;\n  font-weight: bold;\n  border: none;\n  transition: background-color .3s ease;\n  margin-top: 2rem;\n\n  /* Saas */\n  &:hover{\n    background-color: #26C6DA;\n    cursor: pointer;\n  }\n`;\n\nconst Error = styled.div`\n  background-color:  red;\n  color: white;\n  padding: 1rem;\n  width: 100%;\n  text-align: center;\n  margin-bottom: 2rem;\n`;\n\nconst Formulario = () => {\n  const [ datos, guardarDatos ] = useState({\n    marca: '',\n    year: '',\n    plan: ''\n  });\n\n  const [ error, setError ] = useState(false); \n\n  // Extraer los valores del state\n  const { marca, year, plan }  = datos;\n\n  // Leer los datos del formulario y colocarlos en el state\n  const obtenerInformacion = e => {\n    guardarDatos({\n      ...datos,\n      [e.target.name] : e.target.value\n    })\n  }\n\n  // Cuando el usuario presiona submit\n  const cotizarSeguro = e => {\n    e.preventDefault();\n\n    if(marca.trim() === '' || year.trim() === '' || plan.trim() === ''){\n      setError(true);\n      return;\n    }\n\n    setError(false);\n\n  }\n\n  return ( \n    <form\n      onSubmit={cotizarSeguro}\n    >\n    {error ? <Error>Todos los campos son obligatorios</Error> : null}\n      <Campo>\n        <Label>Marca</Label>\n        <Select\n          name='marca'\n          value={marca}\n          onChange={obtenerInformacion}\n        >\n          <option value=''>-- Seleccionar --</option>\n          <option value='americano'>Americano</option>\n          <option value='europeo'>Europeo</option>\n          <option value='asiatico'>Asiatico </option>\n        </Select>\n      </Campo>\n      <Campo>\n        <Label>Año</Label>\n        <Select\n          name='year'\n          value={year}\n          onChange={obtenerInformacion}\n        >\n          <option value=''>-- Seleccionar --</option>\n          <option value='2021'>2021</option>\n          <option value='2020'>2020</option>\n          <option value='2019'>2019</option>\n          <option value='2018'>2018</option>\n          <option value='2017'>2017</option>\n          <option value='2016'>2016</option>\n          <option value='2015'>2015</option>\n          <option value='2014'>2014</option>\n          <option value='2013'>2013</option>\n          <option value='2012'>2012</option>\n        </Select>\n      </Campo>\n      <Campo>\n        <Label>Plan</Label>\n        <InputRadio \n          type='radio'\n          name='plan'\n          value='basico'\n          checked={plan === 'basico'}\n          onChange={obtenerInformacion}\n        /> Básico\n\n        <InputRadio \n          type='radio'\n          name='plan'\n          value='completo'\n          checked={plan === 'completo'}\n          onChange={obtenerInformacion}\n        /> Completo\n      </Campo>\n\n      <Boton type='submit'>Cotizar</Boton>\n    </form>\n   );\n}\n \nexport default Formulario;","import React from 'react';\nimport styled from '@emotion/styled';\nimport Header from './Header';\nimport Formulario from './Formulario';\n\nconst Contenedor = styled.div`\n  max-width: 600px;\n  margin: 0 auto;\n`\n\nconst ContenedorFormulario = styled.div`\n  background-color: #FFF;\n  padding: 3rem;\n`\n\nconst AppContainer = () => {\n  return ( \n    <Contenedor>\n      <Header \n        titulo='Cotizador de seguros'\n      />\n      <ContenedorFormulario>\n        <Formulario /> \n\n      </ContenedorFormulario>\n    </Contenedor>\n   );\n}\n  \nexport default AppContainer;","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport AppContainer from './components/AppContainer';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path='/' component={AppContainer} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}